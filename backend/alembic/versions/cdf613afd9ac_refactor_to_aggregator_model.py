"""refactor to aggregator model

Revision ID: cdf613afd9ac
Revises: 69e3ba7e56ce
Create Date: 2025-10-05 08:59:47.900583

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "cdf613afd9ac"
down_revision: Union[str, Sequence[str], None] = "69e3ba7e56ce"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "applications",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.create_unique_constraint(
        "unique_user_job", "applications", ["job_id", "user_id"]
    )

    # Add title column (nullable first, copy data, then make NOT NULL)
    op.add_column("jobs", sa.Column("title", sa.String(), nullable=True))
    op.execute("UPDATE jobs SET title = role WHERE role IS NOT NULL")
    op.alter_column("jobs", "title", nullable=False)

    # Add url column (nullable first, copy data, then make NOT NULL)
    op.add_column("jobs", sa.Column("url", sa.String(), nullable=True))
    op.execute("UPDATE jobs SET url = link WHERE link IS NOT NULL")
    op.alter_column("jobs", "url", nullable=False)

    # Add source column
    op.add_column("jobs", sa.Column("source", sa.String(), nullable=True))

    op.alter_column(
        "jobs",
        "date_posted",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "jobs",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(op.f("ix_jobs_role"), table_name="jobs")
    op.drop_constraint(op.f("jobs_link_key"), "jobs", type_="unique")
    op.create_index(op.f("ix_jobs_location"), "jobs", ["location"], unique=False)
    op.create_index(op.f("ix_jobs_source"), "jobs", ["source"], unique=False)
    op.create_index(op.f("ix_jobs_title"), "jobs", ["title"], unique=False)
    op.create_unique_constraint(None, "jobs", ["url"])
    op.drop_constraint(op.f("jobs_owner_id_fkey"), "jobs", type_="foreignkey")
    op.drop_column("jobs", "link")
    op.drop_column("jobs", "owner_id")
    op.drop_column("jobs", "role")
    op.alter_column(
        "revoked_tokens",
        "revoked_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.drop_index(op.f("ix_revoked_tokens_token"), table_name="revoked_tokens")
    op.create_unique_constraint(None, "revoked_tokens", ["token"])
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.drop_column("users", "role")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "role",
            sa.VARCHAR(length=10),
            server_default=sa.text("'job_seeker'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.drop_constraint(None, "revoked_tokens", type_="unique")
    op.create_index(
        op.f("ix_revoked_tokens_token"), "revoked_tokens", ["token"], unique=True
    )
    op.alter_column(
        "revoked_tokens",
        "revoked_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.add_column(
        "jobs", sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.add_column(
        "jobs", sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "jobs", sa.Column("link", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.create_foreign_key(
        op.f("jobs_owner_id_fkey"), "jobs", "users", ["owner_id"], ["id"]
    )
    op.drop_constraint(None, "jobs", type_="unique")
    op.drop_index(op.f("ix_jobs_title"), table_name="jobs")
    op.drop_index(op.f("ix_jobs_source"), table_name="jobs")
    op.drop_index(op.f("ix_jobs_location"), table_name="jobs")
    op.create_unique_constraint(
        op.f("jobs_link_key"), "jobs", ["link"], postgresql_nulls_not_distinct=False
    )
    op.create_index(op.f("ix_jobs_role"), "jobs", ["role"], unique=False)
    op.alter_column(
        "jobs",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "jobs",
        "date_posted",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.drop_column("jobs", "source")
    op.drop_column("jobs", "url")
    op.drop_column("jobs", "title")
    op.drop_constraint("unique_user_job", "applications", type_="unique")
    op.alter_column(
        "applications",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    # ### end Alembic commands ###
